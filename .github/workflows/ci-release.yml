# Primary workflow for Zabbix Proxy SQLite3
# This workflow handles version detection, container building, and GitHub releases
# It automatically rebuilds containers when dependencies change

name: CI & Release Chain

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild of all containers'
        required: false
        type: boolean
        default: false
  push:
    branches:
      - main
    paths:
      - 'Dockerfile'
      - 'scripts/**'
      - '.github/workflows/**'

# Security: Minimal required permissions
permissions:
  contents: write
  packages: write
  actions: read
  id-token: write
  security-events: write  # For security scanning

env:
  # Security: Define allowed registries
  ALLOWED_REGISTRIES: "ghcr.io"

jobs:
  # First, detect Zabbix versions
  detect-versions:
    uses: ./.github/workflows/reusable/version-detection.yml

  # Check if we need to rebuild containers
  check-changes:
    uses: ./.github/workflows/reusable/check-changes.yml

  # Update documentation
  update-docs:
    needs: detect-versions
    uses: ./.github/workflows/reusable/update-docs.yml
    with:
      latest_version: ${{ needs.detect-versions.outputs.latest_version }}
      lts_version: ${{ needs.detect-versions.outputs.lts_version }}
      all_versions: ${{ needs.detect-versions.outputs.all_versions }}

  # Build and push containers in matrix
  matrix-setup:
    needs: [detect-versions, check-changes]
    if: needs.check-changes.outputs.should_rebuild == 'true'
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: echo "matrix=${{ needs.detect-versions.outputs.matrix }}" >> $GITHUB_OUTPUT

  # Run build for each matrix item
  build-containers:
    needs: [matrix-setup, detect-versions]
    strategy:
      matrix: ${{ fromJson(needs.matrix-setup.outputs.matrix) }}
      fail-fast: false
    uses: ./.github/workflows/reusable/build-container.yml
    with:
      zabbix_version: ${{ matrix.zabbix_version }}
      major_minor: ${{ matrix.major_minor }}
      is_latest: ${{ matrix.is_latest }}
      latest_version: ${{ needs.detect-versions.outputs.latest_version }}
