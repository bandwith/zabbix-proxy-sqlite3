name: Build and Publish Container

on:
  workflow_call:
    inputs:
      zabbix_version:
        required: true
        type: string
      major_minor:
        required: true
        type: string
      is_latest:
        required: true
        type: string
        description: "Whether this is the LTS version (as a string 'true' or 'false')"
      latest_version:
        required: true
        type: string
        description: "The highest Zabbix version number (e.g., 7.2.7 > 7.0.13)"
    outputs:
      release_id:
        description: "Created GitHub Release ID"
        value: ${{ jobs.build-container.outputs.release_id }}
      release_tag:
        description: "Created GitHub Release Tag"
        value: ${{ jobs.build-container.outputs.release_tag }}

jobs:
  build-container:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
      id-token: write
      actions: read
      security-events: write
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      release_tag: ${{ steps.local_version.outputs.local_version }}
    env:
      IMAGE_NAME: zabbix-proxy-sqlite3
    steps:
      - uses: actions/checkout@v4

      # Security: Verify checkout integrity
      - name: Verify repository integrity
        run: |
          echo "Verifying repository state..."
          git fsck --no-progress --no-dangling
          echo "Repository integrity check passed"

      # Generate reproducible build timestamp in ISO-8601 format
      - name: Generate build timestamp
        id: build_timestamp
        run: echo "DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:latest

      # Security: Use OIDC token instead of PAT when possible
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Determine local version based on changes in the repository
      - name: Get local version with patch increment if needed
        id: local_version
        run: |
          ZABBIX_VERSION="${{ inputs.zabbix_version }}"

          # Initialize values - use base version until determined otherwise
          LOCAL_VERSION="$ZABBIX_VERSION"
          IS_LOCAL_CHANGE=false

          # Check if there are existing tags for this version
          git fetch --tags
          EXISTING_TAGS=$(git tag -l "$ZABBIX_VERSION*" | sort -V)
          echo "Found existing tags: $EXISTING_TAGS"

          # Check for local modifications since the last tag
          LAST_TAG=$(echo "$EXISTING_TAGS" | tail -n 1)
          if [[ -n "$LAST_TAG" ]]; then
            echo "Last tag for this version: $LAST_TAG"

            # Check if Dockerfile or scripts have changed
            CHANGED_FILES=$(git diff --name-only $LAST_TAG HEAD -- Dockerfile scripts)
            if [[ -n "$CHANGED_FILES" ]]; then
              echo "Local changes detected since last build:"
              echo "$CHANGED_FILES"

              # Get the highest N value from existing X.Y.Z.N tags
              HIGHEST_N=0
              for TAG in $EXISTING_TAGS; do
                if [[ $TAG =~ ^${ZABBIX_VERSION}\.[0-9]+$ ]]; then
                  N_VALUE=$(echo "$TAG" | cut -d. -f4)
                  if [[ $N_VALUE -gt $HIGHEST_N ]]; then
                    HIGHEST_N=$N_VALUE
                  fi
                fi
              done

              # Increment N for the new local version
              NEW_N=$(($HIGHEST_N + 1))
              LOCAL_VERSION="$ZABBIX_VERSION.$NEW_N"
              IS_LOCAL_CHANGE=true

              echo "Using local version: $LOCAL_VERSION due to detected changes"
            fi
          fi

          # Set outputs
          echo "local_version=$LOCAL_VERSION" >> $GITHUB_OUTPUT
          echo "is_local_change=$IS_LOCAL_CHANGE" >> $GITHUB_OUTPUT

          # Add to step summary
          echo "## Version Information" >> $GITHUB_STEP_SUMMARY
          echo "| Description | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| ----------- | ----- |" >> $GITHUB_STEP_SUMMARY
          echo "| Upstream Zabbix Version | $ZABBIX_VERSION |" >> $GITHUB_STEP_SUMMARY
          echo "| Local Version | $LOCAL_VERSION |" >> $GITHUB_STEP_SUMMARY
          echo "| Local Changes | $IS_LOCAL_CHANGE |" >> $GITHUB_STEP_SUMMARY

      # Security: Generate SBOM during build with max-level provenance
      - name: Build and push images
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          provenance: mode=max  # Security: Enable max-level provenance attestation
          sbom: true           # Security: Generate SBOM
          platforms: linux/amd64
          outputs: type=image
          file: ./Dockerfile
          secrets: |
            "github_token=${{ secrets.GITHUB_TOKEN }}"
          build-args: |
            ZABBIX_VERSION=ubuntu-${{ inputs.zabbix_version }}
          tags: |
            # Always tag with the local version (which may include .N suffix for local changes)
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.local_version.outputs.local_version }}

            # Always tag with major.minor
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ inputs.major_minor }}

            # Only tag with original Zabbix version if this is not a local change
            ${{ steps.local_version.outputs.is_local_change == 'false' && format('ghcr.io/{0}/{1}:{2}', github.repository_owner, env.IMAGE_NAME, inputs.zabbix_version) || '' }}

            # LTS tag if applicable
            ${{ inputs.is_latest == 'true' && format('ghcr.io/{0}/{1}:lts', github.repository_owner, env.IMAGE_NAME) || '' }}

            # Latest tag if applicable
            ${{ inputs.zabbix_version == inputs.latest_version && format('ghcr.io/{0}/{1}:latest', github.repository_owner, env.IMAGE_NAME) || '' }}
          labels: |
            # Basic metadata
            org.opencontainers.image.title=Zabbix Proxy SQLite3 for AV Systems
            org.opencontainers.image.description=Zabbix Proxy SQLite3 for AV Systems
            org.opencontainers.image.version=${{ inputs.zabbix_version }}

            # Source control information
            org.opencontainers.image.base.name="zabbix/zabbix-proxy-sqlite3"
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}

            # Build reproducibility metadata
            org.opencontainers.image.created=${{ steps.build_timestamp.outputs.DATE }}
            org.opencontainers.image.authors=${{ github.repository_owner }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}

            # Legal information
            org.opencontainers.image.licenses=AGPL-3.0
            org.opencontainers.image.documentation=${{ github.server_url }}/${{ github.repository }}/blob/main/README.md

            # Custom metadata
            org.zabbix.upstream.version=${{ inputs.zabbix_version }}

      # Security: Scan container for vulnerabilities
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.local_version.outputs.local_version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      # Security: Upload vulnerability scan results
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      # Generate SPDX SBOM and submit to GitHub dependency graph
      - name: Generate SPDX SBOM
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.local_version.outputs.local_version }}
          format: 'spdx-json'
          output: 'sbom-spdx.json'

      # Validate SPDX SBOM contents
      - name: Validate SPDX SBOM
        id: validate_spdx_sbom
        run: |
          echo "## SPDX SBOM Validation" >> $GITHUB_STEP_SUMMARY

          # Check if the file exists and has content
          if [ -f "sbom-spdx.json" ] && [ -s "sbom-spdx.json" ]; then
            echo ":white_check_mark: SPDX SBOM file exists and has content" >> $GITHUB_STEP_SUMMARY

            # Count packages
            PACKAGE_COUNT=$(jq '.packages | length' sbom-spdx.json)
            echo ":information_source: Contains information on $PACKAGE_COUNT packages" >> $GITHUB_STEP_SUMMARY

            # Check for critical tools
            for TOOL in "zabbix" "sqlite" "python" "snmp"; do
              if jq -e ".packages[] | select(.name | test(\"$TOOL\"; \"i\"))" sbom-spdx.json > /dev/null; then
                echo ":white_check_mark: Found SBOM entries related to: $TOOL" >> $GITHUB_STEP_SUMMARY
              else
                echo ":warning: No SBOM entries found for key component: $TOOL" >> $GITHUB_STEP_SUMMARY
              fi
            done
          else
            echo ":x: SPDX SBOM file is missing or empty" >> $GITHUB_STEP_SUMMARY
            echo "::warning::SPDX SBOM file is missing or empty"
          fi

      # Generate SBOM and submit to GitHub dependency graph using Anchore SBOM Action
      - name: Generate SBOM and submit to GitHub dependency graph
        uses: anchore/sbom-action@v0
        with:
          image: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.local_version.outputs.local_version }}
          artifact-name: sbom-${{ steps.local_version.outputs.local_version }}.spdx.json
          dependency-snapshot: true

      # Verify Docker Image Attestations
      - name: Verify Docker Image Attestations
        run: |
          echo "## Docker Image Attestations" >> $GITHUB_STEP_SUMMARY
          echo "Verifying attestations for image: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.local_version.outputs.local_version }}" >> $GITHUB_STEP_SUMMARY

          # Install Cosign if not already available
          if ! command -v cosign &> /dev/null; then
            echo "Installing Cosign for attestation verification..." >> $GITHUB_STEP_SUMMARY
            COSIGN_VERSION=v2.2.3
            wget -q -O cosign "https://github.com/sigstore/cosign/releases/download/${COSIGN_VERSION}/cosign-linux-amd64"
            chmod +x cosign
            sudo mv cosign /usr/local/bin/
          fi

          # Verify SBOM attestation
          echo "### SBOM Attestation" >> $GITHUB_STEP_SUMMARY
          if cosign verify-attestation --type cyclonedx \
             ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.local_version.outputs.local_version }} \
             --certificate-identity-regexp "https://github.com/docker/build-push-action" | grep -q "Verification succeeded"; then
            echo ":white_check_mark: SBOM attestation verified" >> $GITHUB_STEP_SUMMARY
          else
            echo ":warning: SBOM attestation verification inconclusive (this is normal for newly built images)" >> $GITHUB_STEP_SUMMARY
          fi

          # Verify Provenance attestation
          echo "### Provenance Attestation (SLSA)" >> $GITHUB_STEP_SUMMARY
          if cosign verify-attestation --type slsaprovenance \
             ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.local_version.outputs.local_version }} \
             --certificate-identity-regexp "https://github.com/docker/build-push-action" | grep -q "Verification succeeded"; then
            echo ":white_check_mark: Provenance attestation verified with mode=max" >> $GITHUB_STEP_SUMMARY
            echo ":information_source: This means your image includes detailed build information that can be verified." >> $GITHUB_STEP_SUMMARY
          else
            echo ":warning: Provenance attestation verification inconclusive (this is normal for newly built images)" >> $GITHUB_STEP_SUMMARY
          fi

          # Document information about attestations
          cat >> $GITHUB_STEP_SUMMARY << EOF

          ### About Docker Attestations

          **SBOM Attestation**: Software Bill of Materials (SBOM) provides a detailed inventory of components in the container image, helping with security scanning and license compliance.

          **Provenance Attestation**: Documents the build process, including the build platform, source repository, and build parameters, forming a verifiable chain of custody for the container image.

          For more information about Docker build attestations, see [Docker Documentation](https://docs.docker.com/build/ci/github-actions/attestations/).
          EOF

      # Cache pruning removed as we're not using cache features anymore

      - name: Generate release notes
        id: release_notes
        run: |
          LOCAL_VERSION="${{ steps.local_version.outputs.local_version }}"
          BASE_VERSION="${{ inputs.zabbix_version }}"
          MAJOR_MINOR="${{ inputs.major_minor }}"
          IS_LATEST="${{ inputs.is_latest }}"
          IS_LOCAL_CHANGE="${{ steps.local_version.outputs.is_local_change }}"

          # Start building release notes
          cat > release_notes.md <<EOF
          ## Zabbix Proxy SQLite3 for AV Systems - v$LOCAL_VERSION

          ### 📦 Version Information
          - **Zabbix Upstream**: $BASE_VERSION
          - **Build Date**: $(date -u +'%Y-%m-%d %H:%M UTC')
          EOF

          # Add local change information if applicable
          if [ "$IS_LOCAL_CHANGE" = "true" ]; then
            cat >> release_notes.md <<EOF
          - **Local Changes**: Yes (version $LOCAL_VERSION contains customizations beyond upstream Zabbix)
          EOF
          fi

          # Continue with the rest of the release notes
          cat >> release_notes.md <<EOF

          ### 🛠️ Container Features
          - **Network Monitoring**: ping, traceroute, mtr, fping, nmap, netcat
          - **SNMP Support**: Full SNMP toolkit with MIB support
          - **Kubernetes**: kubectl for container orchestration monitoring
          - **Speed Testing**: Dual implementation (Cloudflare Speedtest & Ookla Speedtest CLI)
          - **Custom Scripts**: AV-specific monitoring utilities

          ### � Security Assets
          - **SBOMs**: This release includes two Software Bill of Materials files:
             - \`zabbix-proxy-sbom-$BASE_VERSION.txt\`: Custom detailed SBOM with tool versions
             - \`sbom-spdx.json\`: Standard SPDX format for automated scanning

          ### �📥 Container Images
          ```bash
          # Pull this specific version
          docker pull ghcr.io/${{ github.repository_owner }}/zabbix-proxy-sqlite3:$LOCAL_VERSION
          ```

          ### 📋 Container Metadata
          This image includes comprehensive OCI metadata for reproducible builds:
          - **Title**: Zabbix Proxy SQLite3 for AV Systems
          - **Version**: $LOCAL_VERSION
          - **Created**: $(date -u +'%Y-%m-%d %H:%M UTC')
          - **Source**: ${{ github.server_url }}/${{ github.repository }}
          - **Revision**: Full git commit SHA
          - **Documentation**: README.md in repository
          - **License**: AGPL-3.0

          ### 🏷️ Available Tags
          - \\`$LOCAL_VERSION\\` - This specific version
          - \\`$MAJOR_MINOR\\` - Latest patch for this major.minor
          $(if [ "$IS_LOCAL_CHANGE" = "false" ]; then echo "- \\`$BASE_VERSION\\` - Upstream Zabbix version"; fi)
          $(if [ "$IS_LATEST" = "true" ]; then echo "- \\`lts\\` - Long-Term Support version (most stable)"; fi)
          $(if [ "$BASE_VERSION" = "${{ inputs.latest_version }}" ]; then echo "- \\`latest\\` - Latest version with highest version number"; fi)
          EOF

      - name: Extract SBOM from built image
        run: |
          IMAGE_TAG=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.local_version.outputs.local_version }}
          CONTAINER_ID=$(docker create $IMAGE_TAG)
          docker cp $CONTAINER_ID:/usr/local/share/zabbix-proxy-sbom.txt ./zabbix-proxy-sbom-${{ steps.local_version.outputs.local_version }}.txt
          docker rm $CONTAINER_ID

      # Verify image metadata was properly applied
      - name: Verify OCI metadata
        run: |
          echo "## OCI Metadata Validation" >> $GITHUB_STEP_SUMMARY
          IMAGE_TAG=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.local_version.outputs.local_version }}

          echo "Inspecting image metadata for $IMAGE_TAG..." >> $GITHUB_STEP_SUMMARY
          # Use docker inspect to get the labels
          docker inspect $IMAGE_TAG --format='{{ json .Config.Labels }}' | jq . > image_labels.json

          # Check for required OCI labels
          REQUIRED_LABELS=(
            "org.opencontainers.image.title"
            "org.opencontainers.image.description"
            "org.opencontainers.image.version"
            "org.opencontainers.image.source"
            "org.opencontainers.image.revision"
            "org.opencontainers.image.created"
            "org.opencontainers.image.licenses"
            "org.opencontainers.image.url"
            "org.zabbix.upstream.version"
          )

          echo "### OCI Label Verification" >> $GITHUB_STEP_SUMMARY
          for LABEL in "${REQUIRED_LABELS[@]}"; do
            if grep -q "\"$LABEL\":" image_labels.json; then
              VALUE=$(jq -r ".[\"$LABEL\"]" image_labels.json)
              echo ":white_check_mark: $LABEL: $VALUE" >> $GITHUB_STEP_SUMMARY
            else
              echo ":x: Required label missing: $LABEL" >> $GITHUB_STEP_SUMMARY
              echo "::warning::Required OCI label missing: $LABEL"
            fi
          done

      - name: Validate SBOM contents
        id: validate_sbom
        run: |
          SBOM=./zabbix-proxy-sbom-${{ inputs.zabbix_version }}.txt
          echo "## SBOM Validation for $SBOM" >> $GITHUB_STEP_SUMMARY
          REQUIRED_TOOLS=(zabbix-proxy-sqlite3 kubectl jq nmap fping mtr traceroute iproute2 snmpwalk curl wget expect jo nano gnupg tcpdump netcat)
          # Check either Ookla speedtest or Cloudflare speedtest
          if grep -q "^ookla-speedtest:" "$SBOM" || grep -q "^cloudflare-speedtest:" "$SBOM"; then
            echo ":white_check_mark: At least one speedtest implementation found" >> $GITHUB_STEP_SUMMARY
          else
            echo ":x: No speedtest implementation found" >> $GITHUB_STEP_SUMMARY
            MISSING=1
          fi
          MISSING=0

          echo "### SBOM Contents" >> $GITHUB_STEP_SUMMARY
          cat "$SBOM" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### Validation Results" >> $GITHUB_STEP_SUMMARY
          for TOOL in "${REQUIRED_TOOLS[@]}"; do
            if ! grep -q "^$TOOL:" "$SBOM"; then
              echo ":x: $TOOL version not found in SBOM" >> $GITHUB_STEP_SUMMARY
              MISSING=1
            elif grep -q "^$TOOL: Not installed properly" "$SBOM"; then
              echo ":warning: $TOOL installed but may have issues - $(grep "^$TOOL:" "$SBOM")" >> $GITHUB_STEP_SUMMARY
              MISSING=1
            else
              VERSION=$(grep "^$TOOL:" "$SBOM" | sed 's/^[^:]*: //')
              echo ":white_check_mark: $TOOL version found: $VERSION" >> $GITHUB_STEP_SUMMARY
            fi
          done
          if [ "$MISSING" -eq 1 ]; then
            echo "::warning::Some required tools are missing from the SBOM or have installation issues. See summary for details."
          else
            echo "All required tools are present in the SBOM."
          fi

      - name: Create GitHub Release with SBOM asset
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.local_version.outputs.local_version }}
          name: "Zabbix Proxy SQLite3 AV - v${{ steps.local_version.outputs.local_version }}"
          body_path: release_notes.md
          draft: false
          prerelease: false
          make_latest: ${{ inputs.is_latest == 'true' }}
          files: |
            ./zabbix-proxy-sbom-${{ steps.local_version.outputs.local_version }}.txt
            ./sbom-spdx.json
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
